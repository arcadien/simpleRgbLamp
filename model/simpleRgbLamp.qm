<?xml version="1.0" encoding="UTF-8"?>
<model version="5.2.3" links="0">
 <framework name="qpn"/>
 <package name="Classes" stereotype="0x05">
  <class name="SimpleRgbLamp" superclass="qpn::QActive">
   <statechart properties="0x00">
    <initial target="../1">
     <initial_glyph conn="34,3,5,0,5,4">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="waiting_initial_order">
     <state_glyph node="35,7,9,7"/>
    </state>
    <state_diagram size="80,50"/>
   </statechart>
  </class>
  <operation name="SimpleRgbLamp_ctor" type="void" visibility="0x00" properties="0x00">
   <code>SimpleRgbLamp * const me = &amp;AO_SimpleRgbLamp;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;SimpleRgbLamp_initial));
</code>
  </operation>
 </package>
 <directory name="../src">
  <file name="main.c" codec="UTF-8">
   <text>#include &quot;qpn.h&quot;    /* framework API */
#include &quot;bsp.h&quot;         /* Board Support Package interface */

// Q_DEFINE_THIS_FILE

static QEvt simpleRgbLamp_queueSto[10]; /* event queue buffer for SimpleRgbLamp */

/* QF_active[] array defines all active object control blocks --------------*/
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,           (QEvt *)0,        0U                      },
    { (QActive *)&amp;AO_SimpleRgbLamp,  simpleRgbLamp_queueSto,     Q_DIM(simpleRgbLamp_queueSto)     }
};


/* the main function -------------------------------------------------------*/
int main(void) {
    QF_init(Q_DIM(QF_active)); /* initialize the QF-nano framework */
    BSP_init(); /* initialize the Board Support Package */

    SimpleRgbLamp_ctor(); /* in C you must explicitly call the Blinky constructor */
    return QF_run(); /* transfer control to QF-nano */
}</text>
  </file>
  <file name="bsp.c" codec="UTF-8">
   <text>/* Board Support Package implementation for desktop OS (Windows, Linux, MacOS) */
#include &quot;qpn.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */

void BSP_init(void)   {}

/* callback functions needed by the framework ------------------------------*/
void QF_onStartup(void) {}
void QF_onCleanup(void) {}
void QF_onClockTickISR(void) {
    QF_tickXISR(0U); /* QF-nano clock tick processing for rate 0 */
}
void Q_onAssert(char_t const Q_ROM * const module, int_t loc) {
   while(1){}
}


void QK_onIdle(void){}
</text>
  </file>
  <file name="SimpleRgbLamp.c">
   <text>#include &quot;qpn.h&quot;    /* QP-nano framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */
#include &quot;qfn_port.h&quot;


/* ask QM to declare the SimpleRgbLamp class --------------------------------------*/
$declare${Classes::SimpleRgbLamp}

/* the single instance of the SimpleRgbLamp active object -------------------------*/
SimpleRgbLamp AO_SimpleRgbLamp;

/* ask QM to define the SimpleRgbLamp class ---------------------------------------*/
$define${Classes::SimpleRgbLamp_ctor}
$define${Classes::SimpleRgbLamp}</text>
  </file>
 </directory>
 <directory name="../include">
  <file name="qpn_conf.h">
   <text>#ifndef qpn_conf_h
#define qpn_conf_h

#define Q_PARAM_SIZE            4
#define QF_MAX_TICK_RATE        1
#define QF_TIMEEVT_CTR_SIZE     2
#define QF_TIMEEVT_PERIODIC


#endif  /* qpn_conf_h */</text>
  </file>
  <file name="bsp.h" codec="UTF-8">
   <text>#ifndef BSP_H
#define BSP_H

/* a very simple Board Support Package (BSP) -------------------------------*/
enum { BSP_TICKS_PER_SEC = 100 }; /* number of clock ticks in a second */
void BSP_init(void);

/* define the event signals used in the application ------------------------*/
enum SimpleRgbLampSignals {
    //TIMEOUT_SIG = Q_USER_SIG, /* offset the first signal by Q_USER_SIG */
    MAX_SIG /* keep last (the number of signals) */
};

/* active object(s) used in this application -------------------------------*/
extern struct SimpleRgbLamp AO_SimpleRgbLamp; /* opaque pointer to the SimpleRgbLamp AO */


$declare${Classes::SimpleRgbLamp_ctor}

#endif /* BSP_H */</text>
  </file>
 </directory>
</model>
